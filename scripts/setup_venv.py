#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è DataForgePDF
"""

import os
import sys
import subprocess
import platform
import venv
from pathlib import Path


def run_command(command, shell=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=shell, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    return True


def create_virtual_environment():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    venv_path = Path("venv")
    
    if venv_path.exists():
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    try:
        venv.create(venv_path, with_pip=True)
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False


def get_venv_python():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    system = platform.system().lower()
    
    if system == "windows":
        return "venv\\Scripts\\python.exe"
    else:
        return "venv/bin/python"


def get_venv_pip():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    system = platform.system().lower()
    
    if system == "windows":
        return "venv\\Scripts\\pip.exe"
    else:
        return "venv/bin/pip"


def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    pip_path = get_venv_pip()
    
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    success, stdout, stderr = run_command(f'"{pip_path}" install --upgrade pip')
    if not success:
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip: {stderr}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    success, stdout, stderr = run_command(f'"{pip_path}" install -r requirements.txt')
    if success:
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {stderr}")
        return False


def install_system_dependencies():
    """–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö"""
    system = platform.system().lower()
    
    print("\nüìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    
    if system == "darwin":  # macOS
        print("""
–î–ª—è macOS —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
1. Homebrew (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω):
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

2. –°–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
   brew install pango gdk-pixbuf libffi

3. –î–ª—è WeasyPrint:
   brew install cairo pango gdk-pixbuf libffi
        """)
    
    elif system == "linux":
        print("""
–î–ª—è Linux (Ubuntu/Debian) —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:
   sudo apt-get update
   sudo apt-get install build-essential python3-dev python3-pip python3-setuptools python3-wheel python3-cffi libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info

–î–ª—è Linux (CentOS/RHEL/Fedora):
   sudo yum install redhat-rpm-config python3-devel python3-pip python3-setuptools python3-wheel python3-cffi libffi-devel cairo pango gdk-pixbuf2
        """)
    
    elif system == "windows":
        print("""
–î–ª—è Windows:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Microsoft Visual C++ Build Tools
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GTK+ –¥–ª—è Windows (–¥–ª—è WeasyPrint)
3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ WSL (Windows Subsystem for Linux)
        """)
    
    else:
        print(f"–°–∏—Å—Ç–µ–º–∞ {system} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")


def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    directories = ["data", "output", "templates", "fonts"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} —Å–æ–∑–¥–∞–Ω–∞")


def download_fonts():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —à—Ä–∏—Ñ—Ç—ã Roboto"""
    fonts_dir = Path("fonts")
    fonts_dir.mkdir(exist_ok=True)
    
    print("üî§ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤ Roboto...")
    
    # URL –¥–ª—è —à—Ä–∏—Ñ—Ç–æ–≤ Roboto
    font_urls = {
        "Roboto-Regular.ttf": "https://github.com/google/fonts/raw/main/apache/roboto/Roboto-Regular.ttf",
        "Roboto-Bold.ttf": "https://github.com/google/fonts/raw/main/apache/roboto/Roboto-Bold.ttf"
    }
    
    for font_name, url in font_urls.items():
        font_path = fonts_dir / font_name
        if not font_path.exists():
            try:
                import urllib.request
                print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {font_name}...")
                urllib.request.urlretrieve(url, font_path)
                print(f"‚úÖ {font_name} —Å–∫–∞—á–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {font_name}: {e}")
                print(f"   –°–∫–∞—á–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é —Å: {url}")
        else:
            print(f"‚úÖ {font_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def create_example_files():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    data_dir = Path("data")
    
    # –ü—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞
    csv_file = data_dir / "example.csv"
    if not csv_file.exists():
        csv_content = """–ò–º—è,–í–æ–∑—Ä–∞—Å—Ç,–ì–æ—Ä–æ–¥,–ü—Ä–æ—Ñ–µ—Å—Å–∏—è
–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤,25,–ú–æ—Å–∫–≤–∞,–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞,30,–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥,–î–∏–∑–∞–π–Ω–µ—Ä
–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤,28,–ö–∞–∑–∞–Ω—å,–ú–µ–Ω–µ–¥–∂–µ—Ä
–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞,35,–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫,–ê–Ω–∞–ª–∏—Ç–∏–∫"""
        
        with open(csv_file, 'w', encoding='utf-8') as f:
            f.write(csv_content)
        print("‚úÖ –ü—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–Ω")
    
    # –ü—Ä–∏–º–µ—Ä JSON —Ñ–∞–π–ª–∞
    json_file = data_dir / "example.json"
    if not json_file.exists():
        json_content = """[
  {"–∏–º—è": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "–≤–æ–∑—Ä–∞—Å—Ç": 25, "–≥–æ—Ä–æ–¥": "–ú–æ—Å–∫–≤–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"},
  {"–∏–º—è": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", "–≤–æ–∑—Ä–∞—Å—Ç": 30, "–≥–æ—Ä–æ–¥": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è": "–î–∏–∑–∞–π–Ω–µ—Ä"},
  {"–∏–º—è": "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", "–≤–æ–∑—Ä–∞—Å—Ç": 28, "–≥–æ—Ä–æ–¥": "–ö–∞–∑–∞–Ω—å", "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è": "–ú–µ–Ω–µ–¥–∂–µ—Ä"}
]"""
        
        with open(json_file, 'w', encoding='utf-8') as f:
            f.write(json_content)
        print("‚úÖ –ü—Ä–∏–º–µ—Ä JSON —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–Ω")
    
    # –ü—Ä–∏–º–µ—Ä TXT —Ñ–∞–π–ª–∞
    txt_file = data_dir / "example.txt"
    if not txt_file.exists():
        txt_content = """–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\t25\t–ú–æ—Å–∫–≤–∞\t–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞\t30\t–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\t–î–∏–∑–∞–π–Ω–µ—Ä
–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤\t28\t–ö–∞–∑–∞–Ω—å\t–ú–µ–Ω–µ–¥–∂–µ—Ä
–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞\t35\t–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\t–ê–Ω–∞–ª–∏—Ç–∏–∫"""
        
        with open(txt_file, 'w', encoding='utf-8') as f:
            f.write(txt_content)
        print("‚úÖ –ü—Ä–∏–º–µ—Ä TXT —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–Ω")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DataForgePDF")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if not check_python_version():
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not create_virtual_environment():
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_dependencies():
        print("\n‚ö†Ô∏è  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:")
        print("   source venv/bin/activate  # –¥–ª—è Linux/macOS")
        print("   venv\\Scripts\\activate     # –¥–ª—è Windows")
        print("   pip install -r requirements.txt")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
    download_fonts()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    create_example_files()
    
    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    install_system_dependencies()
    
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìñ –î–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print("   source venv/bin/activate  # –¥–ª—è Linux/macOS")
    print("   venv\\Scripts\\activate     # –¥–ª—è Windows")
    print("   python src/main.py")
    
    print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    print("   data/          - —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö")
    print("   output/        - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PDF")
    print("   templates/     - HTML —à–∞–±–ª–æ–Ω—ã")
    print("   fonts/         - —à—Ä–∏—Ñ—Ç—ã")
    print("   src/main.py    - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç")


if __name__ == "__main__":
    main()
